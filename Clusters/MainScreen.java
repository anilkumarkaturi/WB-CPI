package com;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import javax.swing.JPanel;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JLabel;
import java.awt.Dimension;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;
import javax.swing.JFrame;
import javax.swing.UIManager;
import java.awt.Cursor;
import javax.swing.JFileChooser;
import java.io.File;
import java.util.ArrayList;
import org.jfree.ui.RefineryUtilities;
import java.util.Map;
import java.util.LinkedHashMap;
import java.util.Map;
import java.io.*;
import java.util.*;
public class MainScreen extends JFrame{
	String name;
	JPanel p1,p2,p3,p4;
	JLabel l1;
	Font f1,f2;
	JButton b1,b2,b3,b4, b5;
	JScrollPane jsp;
	JTable table;
	DefaultTableModel dtm;
	JFileChooser chooser;
	File file;
	static LinkedHashMap<Integer,ArrayList<String>> cluster = new LinkedHashMap<Integer,ArrayList<String>>();
	ArrayList<double[]> data = new ArrayList<double[]>();
	ArrayList<String> crop = new ArrayList<String>();
	static ArrayList<double[]> centroids = new ArrayList<double[]>();
	static double testData[];
	static int process = 0;
	static ArrayList<Predict> predict = new ArrayList<Predict>();
	static ArrayList<String> graph = new ArrayList<String>();
public MainScreen(){
	super("WB-CPI: Weather Based Crop Prediction in India Using Big Data Analytics");
	setLayout(new BorderLayout());
	f1 = new Font("Courier New",Font.BOLD,16);
	f2 = new Font("Courier New",Font.BOLD,13);
	p1 = new JPanel();
	p1.setLayout(new BorderLayout());
	p1.setBackground(Color.white);
	
	chooser = new JFileChooser(new File("dataset"));

	p2 = new JPanel();
	l1 = new JLabel("<HTML><BODY><CENTER>WB-CPI: Weather Based Crop Prediction in India Using Big Data Analytics</CENTER></BODY></HTML>".toUpperCase());
	l1.setFont(f1);
	p2.add(l1);
	p2.setBackground(Color.white);

	p3 = new JPanel();
	p3.setPreferredSize(new Dimension(200,80));
	p3.setBackground(Color.white);
	
	b1 = new JButton("Upload Dataset to Hadoop");
	b1.setFont(f2);
	p3.add(b1);
	b1.addActionListener(new ActionListener(){
		public void actionPerformed(ActionEvent ae){
			clearTable();
			deleteFiles(new File("output"));
			int option = chooser.showOpenDialog(MainScreen.this);
			if(option == JFileChooser.APPROVE_OPTION){
				file = chooser.getSelectedFile();
				process = 0;
				Cursor hourglassCursor = new Cursor(Cursor.WAIT_CURSOR);
				setCursor(hourglassCursor);
				DatasetHdfsUpload hdfs = new DatasetHdfsUpload(file);
				hdfs.upload();
				Cursor normalCursor = new Cursor(Cursor.DEFAULT_CURSOR);
				setCursor(normalCursor);
				JOptionPane.showMessageDialog(com.MainScreen.this,"File loaded");
			}
		}
	});

	b2 = new JButton("Load Dataset from Hadoop");
	b2.setFont(f2);
	p3.add(b2);
	b2.addActionListener(new ActionListener(){
		public void actionPerformed(ActionEvent ae){
			Cursor hourglassCursor = new Cursor(Cursor.WAIT_CURSOR);
			setCursor(hourglassCursor);
			ReadHdfsDataset hdfs = new ReadHdfsDataset();
			hdfs.read();
			clearTable();
			deleteFiles(new File("output"));
			process = 0;
			data.clear();
			crop.clear();
			centroids.clear();
			displayData();
			Cursor normalCursor = new Cursor(Cursor.DEFAULT_CURSOR);
			setCursor(normalCursor);
		}
	});

	b3 = new JButton("");
	b3.setFont(f2);
	p3.add(b3);
	b3.addActionListener(new ActionListener(){
		public void actionPerformed(ActionEvent ae){
			cluster.clear();
			predict.clear();
			graph.clear();
			String input = JOptionPane.showInputDialog(MainScreen.this,"Please enter Weather Based Data");
			String arr[] = input.split(",");
			testData = new double[arr.length];
			for(int i=0;i<arr.length;i++) {
				testData[i] = Double.parseDouble(arr[i]);
			}
			Hadoop.run("com/data.csv");
			ViewClusters vc = new ViewClusters("KMeans Crop Clustering ");
			for(Map.Entry<Integer,ArrayList<String>> me : cluster.entrySet()){
				int cls = me.getKey();
				ArrayList<String> list = me.getValue();
				for(int i=0;i<list.size();i++){
					String arr1[] = list.get(i).split(",");
					Object row[] = {cls,arr1[0],arr1[1],arr1[2]};
					vc.dtm.addRow(row);
				}
			}
			JOptionPane.showMessageDialog(MainScreen.this,"Total Clusters Generated By KMEANS Clustering = "+cluster.size());
			vc.setVisible(true);
			vc.setSize(600,500);
		}
	});

	//b4 = new JButton("View Crop Prediction");
	//b4.setFont(f2);
	//p3.add(b4);
	b4.addActionListener(new ActionListener(){
		public void actionPerformed(ActionEvent ae){
			java.util.Collections.sort(predict, new Predict());
			ViewPrediction vp = new ViewPrediction("Predicted Crop Output");
			ArrayList<String> temp = new ArrayList<String>();
			for(int i=0;i<predict.size();i++) {
				Predict p = predict.get(i);
				if(!temp.contains(p.getCrop())) {
					double growth = 100 - p.getScore();
					if(growth == 0)
						growth = 100;
					Object row[] = {p.getCrop(), growth+"%"};
					vp.dtm.addRow(row);
					graph.add(p.getCrop()+","+growth);
					temp.add(p.getCrop());
				}
				if(graph.size() >= 10)
					break;
			}
			vp.setSize(600,400);
			vp.setVisible(true);
		}
	});

	b5 = new JButton("Comparison Graph");
	b5.setFont(f2);
	p3.add(b5);
	b5.addActionListener(new ActionListener(){
		public void actionPerformed(ActionEvent ae){
			Chart chart1 = new Chart("Predicted Crop Comparison Graph");
			chart1.pack();
			RefineryUtilities.centerFrameOnScreen(chart1);
			chart1.setVisible(true);
		}
	});

	p1.add(p2,BorderLayout.NORTH);
	p1.add(p3,BorderLayout.CENTER);
	
	p4 = new JPanel();
	p4.setLayout(new BorderLayout());
	p4.setBackground(Color.white);
	dtm = new DefaultTableModel(){
		public boolean isCellEditable(){
			return false;
		}
	};
	dtm.addColumn("Nitrogen");
	dtm.addColumn("Potassium");
	dtm.addColumn("Soil Content");
	dtm.addColumn("Temperature");
	dtm.addColumn("Humidity");
	dtm.addColumn("PH");
	dtm.addColumn("Rainfall");
	dtm.addColumn("Crop");
	
	table = new JTable(dtm);
	table.getTableHeader().setFont(new Font("Courier New",Font.BOLD,15));
	table.setFont(new Font("Courier New",Font.BOLD,14));
	table.setRowHeight(30);
	jsp = new JScrollPane(table);
	p4.add(jsp,BorderLayout.CENTER);
	

	add(p1,BorderLayout.NORTH);
	add(p4,BorderLayout.CENTER);
}
public static void addData(int cls,String data){
	if(cluster.containsKey(cls)) {
		cluster.get(cls).add(data);
	} else {
		ArrayList<String> temp = new ArrayList<String>();
		temp.add(data);
		cluster.put(cls,temp);
	}
}
public static void main(String a[])throws Exception{
	 UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
	 MainScreen ps = new MainScreen();
	 ps.setVisible(true);
	 ps.setExtendedState(JFrame.MAXIMIZED_BOTH);
}
public void clearTable(){
	for(int i=dtm.getRowCount()-1;i>=0;i--){
		dtm.removeRow(i);
	}
}
public void deleteFiles(File path){
	if(path.exists()){
		File[] dir = path.listFiles();
		for(int d=0;d<dir.length;d++){
			if(dir[d].isFile()){
				dir[d].delete();
			}else if(dir[d].isDirectory()){
				deleteFiles(dir[d]);
			}
		}
		if(path.isDirectory()){
			path.delete();
		}
	}
}

public void displayData() {
	try{
		BufferedReader br = new BufferedReader(new FileReader("com/data.csv"));
		String line = br.readLine();
		while((line=br.readLine()) != null) {
			line = line.trim();
			if(line.length() > 0) {
				String arr[] = line.split(",");
				dtm.addRow(arr);
				double d[] = new double[arr.length-1];
				for(int i=0;i<arr.length-1;i++) {
					d[i] = Double.parseDouble(arr[i]);
				}
				data.add(d);
				String name = arr[arr.length-1];
				crop.add(name);
			}
		}
		br.close();
		getCentroid();
		System.out.println(centroids.size()+"====================");
	}catch(Exception e) {
		e.printStackTrace();
	}
}

public void getCentroid() {
	ArrayList<String> c = new ArrayList<String>();
	for(int i=0;i<4;i++) {
		Random r = new Random();
		String id = Integer.toString(r.nextInt(data.size()));
		if(!c.contains(id)) {
			c.add(id);
			centroids.add(data.get(Integer.parseInt(id)));
		} else {
			i = i - 1;
		}
	}
}

}